"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getProgramDataAccount = exports.getProgramDataAddress = exports.ProgramDataAccountInfo = exports.PublicKeyFromString = exports.BPF_UPGRADE_LOADER_ID = void 0;
var web3_js_1 = require("@solana/web3.js");
var superstruct_1 = require("superstruct");
exports.BPF_UPGRADE_LOADER_ID = new web3_js_1.PublicKey('BPFLoaderUpgradeab1e11111111111111111111111');
// Copied from Explorer code https://github.com/solana-labs/solana/blob/master/explorer/src/validators/accounts/upgradeable-program.ts
var superstruct_2 = require("superstruct");
var superstruct_3 = require("superstruct");
exports.PublicKeyFromString = (0, superstruct_3.coerce)((0, superstruct_3.instance)(web3_js_1.PublicKey), (0, superstruct_3.string)(), function (value) { return new web3_js_1.PublicKey(value); });
exports.ProgramDataAccountInfo = (0, superstruct_2.type)({
    authority: (0, superstruct_2.nullable)(exports.PublicKeyFromString),
    // don't care about data yet
    slot: (0, superstruct_2.number)(),
});
function getProgramDataAddress(programId) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, programDataAddress;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([programId.toBuffer()], exports.BPF_UPGRADE_LOADER_ID)];
                case 1:
                    _a = __read.apply(void 0, [_b.sent(), 1]), programDataAddress = _a[0];
                    return [2 /*return*/, programDataAddress];
            }
        });
    });
}
exports.getProgramDataAddress = getProgramDataAddress;
function getProgramDataAccount(connection, programId) {
    return __awaiter(this, void 0, void 0, function () {
        var programDataAddress, account, accountInfo, programData;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getProgramDataAddress(programId)];
                case 1:
                    programDataAddress = _a.sent();
                    return [4 /*yield*/, connection.getParsedAccountInfo(programDataAddress)];
                case 2:
                    account = _a.sent();
                    if (!account || !account.value) {
                        throw new Error("Program data account ".concat(programDataAddress.toBase58(), " for program ").concat(programId.toBase58(), " not found"));
                    }
                    accountInfo = account.value;
                    if (!('parsed' in accountInfo.data &&
                        accountInfo.data.program === 'bpf-upgradeable-loader')) {
                        throw new Error("Invalid program data account ".concat(programDataAddress.toBase58(), " for program ").concat(programId.toBase58()));
                    }
                    programData = (0, superstruct_1.create)(accountInfo.data.parsed.info, exports.ProgramDataAccountInfo);
                    return [2 /*return*/, programData];
            }
        });
    });
}
exports.getProgramDataAccount = getProgramDataAccount;
//# sourceMappingURL=bpfUpgradeableLoader.js.map