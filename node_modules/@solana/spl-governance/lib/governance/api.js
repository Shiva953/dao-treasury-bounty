"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.tryGetGovernanceAccount = exports.getGovernanceAccount = exports.getGovernanceAccounts = exports.getProposalDepositsByDepositPayer = exports.getAllProposals = exports.getProposalsByGovernance = exports.getProposal = exports.getAllGovernances = exports.getGovernance = exports.getAllTokenOwnerRecords = exports.getTokenOwnerRecordsByOwner = exports.getTokenOwnerRecord = exports.getTokenOwnerRecordForRealm = exports.getVoteRecordsByVoter = exports.getVoteRecord = exports.getRealmConfig = exports.tryGetRealmConfig = exports.getRealms = exports.getRealm = void 0;
var web3_js_1 = require("@solana/web3.js");
var serialisation_1 = require("./serialisation");
var accounts_1 = require("./accounts");
var api_1 = require("../core/api");
var bs58_1 = __importDefault(require("bs58"));
var axios_1 = __importDefault(require("axios"));
var borsh_1 = require("../tools/borsh");
var tools_1 = require("../tools");
function getRealm(connection, realm) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccount(connection, realm, accounts_1.Realm)];
        });
    });
}
exports.getRealm = getRealm;
function getRealms(connection, programIds) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            if (programIds instanceof web3_js_1.PublicKey) {
                return [2 /*return*/, getGovernanceAccounts(connection, programIds, accounts_1.Realm)];
            }
            return [2 /*return*/, _getRealms(connection, programIds)];
        });
    });
}
exports.getRealms = getRealms;
function _getRealms(connection, programIds) {
    var _a;
    return __awaiter(this, void 0, void 0, function () {
        var accountTypes, rpcEndpoint, rawProgramAccounts, _loop_1, accountTypes_1, accountTypes_1_1, accountType, e_1_1, accounts, rawProgramAccounts_1, rawProgramAccounts_1_1, rawAccount, data, accountType, account;
        var e_1, _b, e_2, _c;
        return __generator(this, function (_d) {
            switch (_d.label) {
                case 0:
                    accountTypes = (0, accounts_1.getAccountTypes)(accounts_1.Realm);
                    rpcEndpoint = connection._rpcEndpoint;
                    rawProgramAccounts = [];
                    _loop_1 = function (accountType) {
                        var programAccountsJson;
                        return __generator(this, function (_e) {
                            switch (_e.label) {
                                case 0: return [4 /*yield*/, axios_1.default.request({
                                        url: rpcEndpoint,
                                        method: 'POST',
                                        headers: {
                                            'Content-Type': 'application/json',
                                        },
                                        data: JSON.stringify(__spreadArray([], __read(programIds.map(function (x) {
                                            return {
                                                jsonrpc: '2.0',
                                                id: x.toBase58(),
                                                method: 'getProgramAccounts',
                                                params: [
                                                    x.toBase58(),
                                                    {
                                                        commitment: connection.commitment,
                                                        encoding: 'base64',
                                                        filters: [
                                                            {
                                                                memcmp: {
                                                                    offset: 0,
                                                                    bytes: bs58_1.default.encode([accountType]),
                                                                },
                                                            },
                                                        ],
                                                    },
                                                ],
                                            };
                                        })), false)),
                                    })];
                                case 1:
                                    programAccountsJson = _e.sent();
                                    rawProgramAccounts.push.apply(rawProgramAccounts, __spreadArray([], __read((_a = programAccountsJson === null || programAccountsJson === void 0 ? void 0 : programAccountsJson.data) === null || _a === void 0 ? void 0 : _a.filter(function (x) { return x.result; }).flatMap(function (x) { return x.result; })), false));
                                    return [2 /*return*/];
                            }
                        });
                    };
                    _d.label = 1;
                case 1:
                    _d.trys.push([1, 6, 7, 8]);
                    accountTypes_1 = __values(accountTypes), accountTypes_1_1 = accountTypes_1.next();
                    _d.label = 2;
                case 2:
                    if (!!accountTypes_1_1.done) return [3 /*break*/, 5];
                    accountType = accountTypes_1_1.value;
                    return [5 /*yield**/, _loop_1(accountType)];
                case 3:
                    _d.sent();
                    _d.label = 4;
                case 4:
                    accountTypes_1_1 = accountTypes_1.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_1_1 = _d.sent();
                    e_1 = { error: e_1_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (accountTypes_1_1 && !accountTypes_1_1.done && (_b = accountTypes_1.return)) _b.call(accountTypes_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                    return [7 /*endfinally*/];
                case 8:
                    accounts = [];
                    try {
                        for (rawProgramAccounts_1 = __values(rawProgramAccounts), rawProgramAccounts_1_1 = rawProgramAccounts_1.next(); !rawProgramAccounts_1_1.done; rawProgramAccounts_1_1 = rawProgramAccounts_1.next()) {
                            rawAccount = rawProgramAccounts_1_1.value;
                            try {
                                data = Buffer.from(rawAccount.account.data[0], 'base64');
                                accountType = data[0];
                                account = {
                                    pubkey: new web3_js_1.PublicKey(rawAccount.pubkey),
                                    account: (0, borsh_1.deserializeBorsh)((0, serialisation_1.getGovernanceSchemaForAccount)(accountType), accounts_1.Realm, data),
                                    owner: rawAccount.account.owner,
                                };
                                accounts.push(account);
                            }
                            catch (ex) {
                                console.info("Can't deserialize Realm @ ".concat(rawAccount.pubkey, "."), (0, tools_1.getErrorMessage)(ex));
                            }
                        }
                    }
                    catch (e_2_1) { e_2 = { error: e_2_1 }; }
                    finally {
                        try {
                            if (rawProgramAccounts_1_1 && !rawProgramAccounts_1_1.done && (_c = rawProgramAccounts_1.return)) _c.call(rawProgramAccounts_1);
                        }
                        finally { if (e_2) throw e_2.error; }
                    }
                    return [2 /*return*/, accounts];
            }
        });
    });
}
// Realm config
function tryGetRealmConfig(connection, programId, realmPk) {
    return __awaiter(this, void 0, void 0, function () {
        var realmConfigPk, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _b.trys.push([0, 3, , 4]);
                    return [4 /*yield*/, (0, accounts_1.getRealmConfigAddress)(programId, realmPk)];
                case 1:
                    realmConfigPk = _b.sent();
                    return [4 /*yield*/, getGovernanceAccount(connection, realmConfigPk, accounts_1.RealmConfigAccount)];
                case 2: return [2 /*return*/, _b.sent()];
                case 3:
                    _a = _b.sent();
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    });
}
exports.tryGetRealmConfig = tryGetRealmConfig;
function getRealmConfig(connection, realmConfigPk) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccount(connection, realmConfigPk, accounts_1.RealmConfigAccount)];
        });
    });
}
exports.getRealmConfig = getRealmConfig;
// VoteRecords
function getVoteRecord(connection, voteRecordPk) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccount(connection, voteRecordPk, accounts_1.VoteRecord)];
        });
    });
}
exports.getVoteRecord = getVoteRecord;
function getVoteRecordsByVoter(connection, programId, voter) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccounts(connection, programId, accounts_1.VoteRecord, [
                    (0, api_1.pubkeyFilter)(33, voter),
                ])];
        });
    });
}
exports.getVoteRecordsByVoter = getVoteRecordsByVoter;
// TokenOwnerRecords
function getTokenOwnerRecordForRealm(connection, programId, realm, governingTokenMint, governingTokenOwner) {
    return __awaiter(this, void 0, void 0, function () {
        var tokenOwnerRecordPk;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, (0, accounts_1.getTokenOwnerRecordAddress)(programId, realm, governingTokenMint, governingTokenOwner)];
                case 1:
                    tokenOwnerRecordPk = _a.sent();
                    return [2 /*return*/, getGovernanceAccount(connection, tokenOwnerRecordPk, accounts_1.TokenOwnerRecord)];
            }
        });
    });
}
exports.getTokenOwnerRecordForRealm = getTokenOwnerRecordForRealm;
function getTokenOwnerRecord(connection, tokenOwnerRecordPk) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccount(connection, tokenOwnerRecordPk, accounts_1.TokenOwnerRecord)];
        });
    });
}
exports.getTokenOwnerRecord = getTokenOwnerRecord;
/**
 * Returns TokenOwnerRecords for the given token owner (voter)
 * Note: The function returns TokenOwnerRecords for both council and community token holders
 *
 * @param connection
 * @param programId
 * @param governingTokenOwner
 * @returns
 */
function getTokenOwnerRecordsByOwner(connection, programId, governingTokenOwner) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccounts(connection, programId, accounts_1.TokenOwnerRecord, [
                    (0, api_1.pubkeyFilter)(1 + 32 + 32, governingTokenOwner),
                ])];
        });
    });
}
exports.getTokenOwnerRecordsByOwner = getTokenOwnerRecordsByOwner;
/**
 * Returns all TokenOwnerRecords for all members for the given Realm
 * Note: The function returns TokenOwnerRecords for both council and community token holders
 *
 * @param connection
 * @param programId
 * @param realmPk
 * @returns
 */
function getAllTokenOwnerRecords(connection, programId, realmPk) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccounts(connection, programId, accounts_1.TokenOwnerRecord, [
                    (0, api_1.pubkeyFilter)(1, realmPk),
                ])];
        });
    });
}
exports.getAllTokenOwnerRecords = getAllTokenOwnerRecords;
// Governances
function getGovernance(connection, governance) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccount(connection, governance, accounts_1.Governance)];
        });
    });
}
exports.getGovernance = getGovernance;
/**
 * Returns all governances for the given program instance and realm
 *
 * @param connection
 * @param programId
 * @param realmPk
 * @returns
 */
function getAllGovernances(connection, programId, realmPk) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccounts(connection, programId, accounts_1.Governance, [
                    (0, api_1.pubkeyFilter)(1, realmPk),
                ])];
        });
    });
}
exports.getAllGovernances = getAllGovernances;
// Proposal
function getProposal(connection, proposal) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccount(connection, proposal, accounts_1.Proposal)];
        });
    });
}
exports.getProposal = getProposal;
/**
 * Returns all Proposals for the given Governance
 *
 * @param connection
 * @param programId
 * @param governancePk
 * @returns
 */
function getProposalsByGovernance(connection, programId, governancePk) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccounts(connection, programId, accounts_1.Proposal, [
                    (0, api_1.pubkeyFilter)(1, governancePk),
                ])];
        });
    });
}
exports.getProposalsByGovernance = getProposalsByGovernance;
/**
 * Returns all Proposals for the given Realm
 *
 * @param connection
 * @param programId
 * @param realmPk
 * @returns
 */
function getAllProposals(connection, programId, realmPk) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getAllGovernances(connection, programId, realmPk).then(function (gs) {
                    return Promise.all(gs.map(function (g) { return getProposalsByGovernance(connection, programId, g.pubkey); }));
                })];
        });
    });
}
exports.getAllProposals = getAllProposals;
// ProposalDeposit api
/**
 * Returns all ProposalDeposits for the given deposit payer
 * @param connection
 * @param programId
 * @param depositPayer
 * @returns
 */
function getProposalDepositsByDepositPayer(connection, programId, depositPayer) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, getGovernanceAccounts(connection, programId, accounts_1.ProposalDeposit, [
                    (0, api_1.pubkeyFilter)(1 + 32, depositPayer),
                ])];
        });
    });
}
exports.getProposalDepositsByDepositPayer = getProposalDepositsByDepositPayer;
// Generic API
function getGovernanceAccounts(connection, programId, accountClass, filters) {
    if (filters === void 0) { filters = []; }
    return __awaiter(this, void 0, void 0, function () {
        var accountTypes, all, accountTypes_2, accountTypes_2_1, accountType, accounts, e_3_1;
        var e_3, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    accountTypes = (0, accounts_1.getAccountTypes)(accountClass);
                    all = [];
                    _b.label = 1;
                case 1:
                    _b.trys.push([1, 6, 7, 8]);
                    accountTypes_2 = __values(accountTypes), accountTypes_2_1 = accountTypes_2.next();
                    _b.label = 2;
                case 2:
                    if (!!accountTypes_2_1.done) return [3 /*break*/, 5];
                    accountType = accountTypes_2_1.value;
                    return [4 /*yield*/, (0, api_1.getBorshProgramAccounts)(connection, programId, function (at) { return (0, serialisation_1.getGovernanceSchemaForAccount)(at); }, accountClass, filters, accountType)];
                case 3:
                    accounts = _b.sent();
                    all.push.apply(all, __spreadArray([], __read(accounts), false));
                    _b.label = 4;
                case 4:
                    accountTypes_2_1 = accountTypes_2.next();
                    return [3 /*break*/, 2];
                case 5: return [3 /*break*/, 8];
                case 6:
                    e_3_1 = _b.sent();
                    e_3 = { error: e_3_1 };
                    return [3 /*break*/, 8];
                case 7:
                    try {
                        if (accountTypes_2_1 && !accountTypes_2_1.done && (_a = accountTypes_2.return)) _a.call(accountTypes_2);
                    }
                    finally { if (e_3) throw e_3.error; }
                    return [7 /*endfinally*/];
                case 8: return [2 /*return*/, all];
            }
        });
    });
}
exports.getGovernanceAccounts = getGovernanceAccounts;
function getGovernanceAccount(connection, accountPk, accountClass) {
    return __awaiter(this, void 0, void 0, function () {
        var accountInfo;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.getAccountInfo(accountPk)];
                case 1:
                    accountInfo = _a.sent();
                    if (!accountInfo) {
                        throw new Error("Account ".concat(accountPk, " of type ").concat(accountClass.name, " not found"));
                    }
                    return [2 /*return*/, (0, serialisation_1.GovernanceAccountParser)(accountClass)(accountPk, accountInfo)];
            }
        });
    });
}
exports.getGovernanceAccount = getGovernanceAccount;
function tryGetGovernanceAccount(connection, accountPk, accountClass) {
    return __awaiter(this, void 0, void 0, function () {
        var accountInfo;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, connection.getAccountInfo(accountPk)];
                case 1:
                    accountInfo = _a.sent();
                    if (accountInfo) {
                        return [2 /*return*/, (0, serialisation_1.GovernanceAccountParser)(accountClass)(accountPk, accountInfo)];
                    }
                    return [2 /*return*/];
            }
        });
    });
}
exports.tryGetGovernanceAccount = tryGetGovernanceAccount;
//# sourceMappingURL=api.js.map