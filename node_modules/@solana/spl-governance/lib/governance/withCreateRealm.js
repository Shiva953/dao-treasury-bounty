"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withCreateRealm = void 0;
var web3_js_1 = require("@solana/web3.js");
var serialisation_1 = require("./serialisation");
var borsh_1 = require("borsh");
var instructions_1 = require("./instructions");
var accounts_1 = require("./accounts");
var constants_1 = require("../registry/constants");
var sdk_1 = require("../tools/sdk");
var tools_1 = require("./tools");
function withCreateRealm(instructions, programId, programVersion, name, realmAuthority, communityMint, payer, councilMint, communityMintMaxVoteWeightSource, minCommunityWeightToCreateGovernance, communityTokenConfig, councilTokenConfig) {
    return __awaiter(this, void 0, void 0, function () {
        var configArgs, args, data, _a, realmAddress, communityTokenHoldingAddress, keys, councilTokenHoldingAddress, realmConfigMeta;
        var _b;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0:
                    configArgs = (0, tools_1.createRealmConfigArgs)(programVersion, councilMint, communityMintMaxVoteWeightSource, minCommunityWeightToCreateGovernance, communityTokenConfig, councilTokenConfig);
                    args = new instructions_1.CreateRealmArgs({
                        configArgs: configArgs,
                        name: name,
                    });
                    data = Buffer.from((0, borsh_1.serialize)((0, serialisation_1.getGovernanceInstructionSchema)(programVersion), args));
                    return [4 /*yield*/, web3_js_1.PublicKey.findProgramAddress([Buffer.from(accounts_1.GOVERNANCE_PROGRAM_SEED), Buffer.from(args.name)], programId)];
                case 1:
                    _a = __read.apply(void 0, [_c.sent(), 1]), realmAddress = _a[0];
                    return [4 /*yield*/, (0, accounts_1.getTokenHoldingAddress)(programId, realmAddress, communityMint)];
                case 2:
                    communityTokenHoldingAddress = _c.sent();
                    keys = [
                        {
                            pubkey: realmAddress,
                            isSigner: false,
                            isWritable: true,
                        },
                        {
                            pubkey: realmAuthority,
                            isSigner: false,
                            isWritable: false,
                        },
                        {
                            pubkey: communityMint,
                            isSigner: false,
                            isWritable: false,
                        },
                        {
                            pubkey: communityTokenHoldingAddress,
                            isSigner: false,
                            isWritable: true,
                        },
                        {
                            pubkey: payer,
                            isSigner: true,
                            isWritable: true,
                        },
                        {
                            pubkey: sdk_1.SYSTEM_PROGRAM_ID,
                            isSigner: false,
                            isWritable: false,
                        },
                        {
                            pubkey: sdk_1.TOKEN_PROGRAM_ID,
                            isSigner: false,
                            isWritable: false,
                        },
                        {
                            pubkey: web3_js_1.SYSVAR_RENT_PUBKEY,
                            isSigner: false,
                            isWritable: false,
                        },
                    ];
                    if (!councilMint) return [3 /*break*/, 4];
                    return [4 /*yield*/, (0, accounts_1.getTokenHoldingAddress)(programId, realmAddress, councilMint)];
                case 3:
                    councilTokenHoldingAddress = _c.sent();
                    keys = __spreadArray(__spreadArray([], __read(keys), false), [
                        {
                            pubkey: councilMint,
                            isSigner: false,
                            isWritable: false,
                        },
                        {
                            pubkey: councilTokenHoldingAddress,
                            isSigner: false,
                            isWritable: true,
                        },
                    ], false);
                    _c.label = 4;
                case 4:
                    _b = {};
                    return [4 /*yield*/, (0, accounts_1.getRealmConfigAddress)(programId, realmAddress)];
                case 5:
                    realmConfigMeta = (_b.pubkey = _c.sent(),
                        _b.isSigner = false,
                        _b.isWritable = true,
                        _b);
                    if (programVersion >= constants_1.PROGRAM_VERSION_V3) {
                        keys.push(realmConfigMeta);
                    }
                    (0, tools_1.withTokenConfigAccounts)(keys, communityTokenConfig, councilTokenConfig);
                    if (programVersion == constants_1.PROGRAM_VERSION_V2 &&
                        ((communityTokenConfig === null || communityTokenConfig === void 0 ? void 0 : communityTokenConfig.voterWeightAddin) ||
                            (communityTokenConfig === null || communityTokenConfig === void 0 ? void 0 : communityTokenConfig.maxVoterWeightAddin))) {
                        keys.push(realmConfigMeta);
                    }
                    instructions.push(new web3_js_1.TransactionInstruction({
                        keys: keys,
                        programId: programId,
                        data: data,
                    }));
                    return [2 /*return*/, realmAddress];
            }
        });
    });
}
exports.withCreateRealm = withCreateRealm;
//# sourceMappingURL=withCreateRealm.js.map