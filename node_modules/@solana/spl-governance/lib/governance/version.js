"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getGovernanceProgramVersion = void 0;
var web3_js_1 = require("@solana/web3.js");
var bn_js_1 = __importDefault(require("bn.js"));
var constants_1 = require("../registry/constants");
var numbers_1 = require("../tools/numbers");
var bpfUpgradeableLoader_1 = require("../tools/sdk/bpfUpgradeableLoader");
var runtime_1 = require("../tools/sdk/runtime");
var version_1 = require("../tools/version");
var accounts_1 = require("./accounts");
var serialisation_1 = require("./serialisation");
var withUpdateProgramMetadata_1 = require("./withUpdateProgramMetadata");
function getGovernanceProgramVersion(connection, programId, env) {
    return __awaiter(this, void 0, void 0, function () {
        var programMetadataPk, programMetadataInfo, programMetadata, deploySlot, programData, _a, version, _b, instructions, walletPk, transaction, getVersion, prefix_1, simVersion, ex_1;
        return __generator(this, function (_c) {
            switch (_c.label) {
                case 0: return [4 /*yield*/, (0, accounts_1.getProgramMetadataAddress)(programId)];
                case 1:
                    programMetadataPk = _c.sent();
                    _c.label = 2;
                case 2:
                    _c.trys.push([2, 9, , 10]);
                    return [4 /*yield*/, connection.getAccountInfo(programMetadataPk)];
                case 3:
                    programMetadataInfo = _c.sent();
                    if (!programMetadataInfo) return [3 /*break*/, 8];
                    programMetadata = (0, serialisation_1.GovernanceAccountParser)(accounts_1.ProgramMetadata)(programMetadataPk, programMetadataInfo);
                    deploySlot = numbers_1.BN_ZERO;
                    _c.label = 4;
                case 4:
                    _c.trys.push([4, 6, , 7]);
                    return [4 /*yield*/, (0, bpfUpgradeableLoader_1.getProgramDataAccount)(connection, new web3_js_1.PublicKey(programId))];
                case 5:
                    programData = _c.sent();
                    deploySlot = new bn_js_1.default(programData.slot);
                    return [3 /*break*/, 7];
                case 6:
                    _a = _c.sent();
                    return [3 /*break*/, 7];
                case 7:
                    // Check if ProgramMetadata is not stale
                    if (programMetadata.account.updatedAt.gte(deploySlot)) {
                        version = (0, version_1.parseVersion)(programMetadata.account.version);
                        console.log('Program version (metadata)', version);
                        return [2 /*return*/, version.major];
                    }
                    _c.label = 8;
                case 8: return [3 /*break*/, 10];
                case 9:
                    _b = _c.sent();
                    return [3 /*break*/, 10];
                case 10:
                    _c.trys.push([10, 13, , 14]);
                    instructions = [];
                    walletPk = new web3_js_1.PublicKey('ENmcpFCpxN1CqyUjuog9yyUVfdXBKF3LVCwLr7grJZpk');
                    return [4 /*yield*/, (0, withUpdateProgramMetadata_1.withUpdateProgramMetadata)(instructions, programId, 2, walletPk)];
                case 11:
                    _c.sent();
                    transaction = new web3_js_1.Transaction({ feePayer: walletPk });
                    transaction.add.apply(transaction, __spreadArray([], __read(instructions), false));
                    return [4 /*yield*/, (0, runtime_1.simulateTransaction)(connection, transaction, 'recent')];
                case 12:
                    getVersion = _c.sent();
                    if (getVersion.value.logs) {
                        prefix_1 = 'PROGRAM-VERSION:"';
                        simVersion = getVersion.value.logs
                            .filter(function (l) { return l.includes(prefix_1); })
                            .map(function (l) {
                            var versionStart = l.indexOf(prefix_1);
                            return (0, version_1.parseVersion)(l.substring(versionStart + prefix_1.length, l.length - 1));
                        })[0];
                        if (simVersion) {
                            console.log('Program version (simulation)', simVersion);
                            return [2 /*return*/, simVersion.major];
                        }
                    }
                    return [3 /*break*/, 14];
                case 13:
                    ex_1 = _c.sent();
                    console.log("Can't determine program version", ex_1);
                    return [3 /*break*/, 14];
                case 14:
                    // If we can't determine the version using the program instance and running localnet then use the latest version
                    if (env === 'localnet') {
                        return [2 /*return*/, constants_1.PROGRAM_VERSION];
                    }
                    // Default to V1 which doesn't support ProgramMetadata
                    console.log('Program version (default)', constants_1.PROGRAM_VERSION_V1);
                    return [2 /*return*/, constants_1.PROGRAM_VERSION_V1];
            }
        });
    });
}
exports.getGovernanceProgramVersion = getGovernanceProgramVersion;
//# sourceMappingURL=version.js.map