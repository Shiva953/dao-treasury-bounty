"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.withExecuteTransaction = void 0;
var web3_js_1 = require("@solana/web3.js");
var serialisation_1 = require("./serialisation");
var borsh_1 = require("borsh");
var instructions_1 = require("./instructions");
var accounts_1 = require("./accounts");
var constants_1 = require("../registry/constants");
var withExecuteTransaction = function (instructions, programId, programVersion, governance, proposal, transactionAddress, transactionInstructions) { return __awaiter(void 0, void 0, void 0, function () {
    var args, data, nativeTreasury, keys, transactionInstructions_1, transactionInstructions_1_1, instruction;
    var e_1, _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0:
                args = new instructions_1.ExecuteTransactionArgs();
                data = Buffer.from((0, borsh_1.serialize)((0, serialisation_1.getGovernanceInstructionSchema)(programVersion), args));
                return [4 /*yield*/, (0, accounts_1.getNativeTreasuryAddress)(programId, governance)];
            case 1:
                nativeTreasury = _b.sent();
                keys = [
                    {
                        pubkey: governance,
                        isWritable: false,
                        isSigner: false,
                    },
                    {
                        pubkey: proposal,
                        isWritable: true,
                        isSigner: false,
                    },
                    {
                        pubkey: transactionAddress,
                        isWritable: true,
                        isSigner: false,
                    },
                ];
                if (programVersion === constants_1.PROGRAM_VERSION_V1) {
                    keys.push({
                        pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY,
                        isSigner: false,
                        isWritable: false,
                    });
                }
                try {
                    for (transactionInstructions_1 = __values(transactionInstructions), transactionInstructions_1_1 = transactionInstructions_1.next(); !transactionInstructions_1_1.done; transactionInstructions_1_1 = transactionInstructions_1.next()) {
                        instruction = transactionInstructions_1_1.value;
                        // When an instruction needs to be signed by the Governance PDA or the Native treasury then its isSigner flag has to be reset on AccountMeta
                        // because the signature will be required during cpi call invoke_signed() and not when we send ExecuteInstruction
                        instruction.accounts = instruction.accounts.map(function (a) {
                            return (a.pubkey.toBase58() === governance.toBase58() ||
                                a.pubkey.toBase58() === nativeTreasury.toBase58()) &&
                                a.isSigner
                                ? new accounts_1.AccountMetaData({
                                    pubkey: a.pubkey,
                                    isWritable: a.isWritable,
                                    isSigner: false,
                                })
                                : a;
                        });
                        keys.push.apply(keys, __spreadArray([{
                                pubkey: instruction.programId,
                                isWritable: false,
                                isSigner: false,
                            }], __read(instruction.accounts), false));
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (transactionInstructions_1_1 && !transactionInstructions_1_1.done && (_a = transactionInstructions_1.return)) _a.call(transactionInstructions_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
                instructions.push(new web3_js_1.TransactionInstruction({
                    keys: keys,
                    programId: programId,
                    data: data,
                }));
                return [2 /*return*/];
        }
    });
}); };
exports.withExecuteTransaction = withExecuteTransaction;
//# sourceMappingURL=withExecuteTransaction.js.map