"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getBorshProgramAccounts = exports.booleanFilter = exports.pubkeyFilter = exports.MemcmpFilter = exports.RpcContext = void 0;
var web3_js_1 = require("@solana/web3.js");
var bs58_1 = __importDefault(require("bs58"));
var script_1 = require("../tools/script");
var borsh_1 = require("../tools/borsh");
var walletAdapter_1 = require("../tools/walletAdapter");
// Context to make RPC calls for given clone programId, current connection, endpoint and wallet
var RpcContext = /** @class */ (function () {
    function RpcContext(programId, programVersion, wallet, connection, endpoint) {
        this.programId = programId;
        this.wallet = wallet;
        this.connection = connection;
        this.endpoint = endpoint;
        this.programVersion = programVersion;
    }
    Object.defineProperty(RpcContext.prototype, "walletPubkey", {
        get: function () {
            var _a;
            if (!((_a = this.wallet) === null || _a === void 0 ? void 0 : _a.publicKey)) {
                throw new walletAdapter_1.WalletNotConnectedError();
            }
            return this.wallet.publicKey;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(RpcContext.prototype, "programIdBase58", {
        get: function () {
            return this.programId.toBase58();
        },
        enumerable: false,
        configurable: true
    });
    return RpcContext;
}());
exports.RpcContext = RpcContext;
var MemcmpFilter = /** @class */ (function () {
    function MemcmpFilter(offset, bytes) {
        this.offset = offset;
        this.bytes = bytes;
    }
    MemcmpFilter.prototype.isMatch = function (buffer) {
        if (this.offset + this.bytes.length > buffer.length) {
            return false;
        }
        for (var i = 0; i < this.bytes.length; i++) {
            if (this.bytes[i] !== buffer[this.offset + i])
                return false;
        }
        return true;
    };
    return MemcmpFilter;
}());
exports.MemcmpFilter = MemcmpFilter;
// PublicKey MemcmpFilter
var pubkeyFilter = function (offset, pubkey) { return (!pubkey ? undefined : new MemcmpFilter(offset, pubkey.toBuffer())); };
exports.pubkeyFilter = pubkeyFilter;
// Boolean MemcmpFilter
var booleanFilter = function (offset, value) {
    return new MemcmpFilter(offset, Buffer.from(value ? [1] : [0]));
};
exports.booleanFilter = booleanFilter;
function getBorshProgramAccounts(connection, programId, getSchema, accountFactory, filters, accountType) {
    if (filters === void 0) { filters = []; }
    return __awaiter(this, void 0, void 0, function () {
        var programAccounts, accounts, programAccounts_1, programAccounts_1_1, rawAccount, data, accountType_1, account;
        var e_1, _a;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    accountType = accountType !== null && accountType !== void 0 ? accountType : new accountFactory({}).accountType;
                    return [4 /*yield*/, connection.getProgramAccounts(programId, {
                            commitment: connection.commitment,
                            filters: __spreadArray([
                                {
                                    memcmp: {
                                        offset: 0,
                                        bytes: bs58_1.default.encode([accountType]),
                                    },
                                }
                            ], __read(filters.map(function (f) { return ({
                                memcmp: { offset: f.offset, bytes: bs58_1.default.encode(f.bytes) },
                            }); })), false),
                        })];
                case 1:
                    programAccounts = _b.sent();
                    accounts = [];
                    try {
                        for (programAccounts_1 = __values(programAccounts), programAccounts_1_1 = programAccounts_1.next(); !programAccounts_1_1.done; programAccounts_1_1 = programAccounts_1.next()) {
                            rawAccount = programAccounts_1_1.value;
                            try {
                                data = rawAccount.account.data;
                                accountType_1 = data[0];
                                account = {
                                    pubkey: new web3_js_1.PublicKey(rawAccount.pubkey),
                                    account: (0, borsh_1.deserializeBorsh)(getSchema(accountType_1), accountFactory, data),
                                    owner: rawAccount.account.owner,
                                };
                                accounts.push(account);
                            }
                            catch (ex) {
                                console.info("Can't deserialize ".concat(accountFactory.name, " @ ").concat(rawAccount.pubkey, "."), (0, script_1.getErrorMessage)(ex));
                            }
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (programAccounts_1_1 && !programAccounts_1_1.done && (_a = programAccounts_1.return)) _a.call(programAccounts_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                    return [2 /*return*/, accounts];
            }
        });
    });
}
exports.getBorshProgramAccounts = getBorshProgramAccounts;
//# sourceMappingURL=api.js.map